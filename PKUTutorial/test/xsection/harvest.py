#!/usr/bin/env python

import sys
import os
import pwd
import time
import datetime

print_main_results = True
print_other_results= True
print_massfit_nomi = True
print_ptdist_nomi  = True
print_weidist_nomi = True
print_massfit_syst = True


header = """
%to remove the 'too many files open' error
\let\mypdfximage\pdfximage
\def\pdfximage{\immediate\mypdfximage}

\\documentclass[10pt]{report}
\\usepackage{subfigure}
\\usepackage{rotating}
\\usepackage{hyperref}
\\usepackage{ifthen}

\\usepackage{simplemargins}
\\setleftmargin{1 cm}
\\setrightmargin{1 cm}
\\settopmargin{1 cm}
\\setbottommargin{2 cm}

\\newcommand{\\ups}   {\\ensuremath{\\Upsilon}\\,}
\\newcommand{\\upsi}  {\\ensuremath{\\Upsilon\\mathrm{(1S)}\\,}}
\\newcommand{\\upsii} {\\ensuremath{\\Upsilon\\mathrm{(2S)}\\,}}
\\newcommand{\\upsiii}{\\ensuremath{\\Upsilon\\mathrm{(3S)}\\,}}
\\newcommand{\\upsn}  {\\ensuremath{\\Upsilon\\mathrm{(nS)}\\,}}
\\newcommand{\\JPsi}{\\ensuremath{{\\mathrm{J/\\Psi~}}}}
\\newcommand{\\eff}{\\varepsilon}
\\newcommand{\\acc}{{\\cal A}}
\\newcommand{\\pt}{\\ensuremath{p_{\\mathrm{T}}}}
\\newcommand{\\GeV}{\\ensuremath{\\,\\text{Ge\\hspace{-.08em}V}}}
\\newcommand{\\GeVc}{\\ensuremath{\\,\\rm{GeV/c}\\,}}
\\newcommand{\\GeVcc}{\\ensuremath{\\,\\rm{GeV/c^{2}}\\,}}
\\newcommand{\\gev}{\\GeV}

\\newboolean{main_results}
\\newboolean{other_results}
\\newboolean{massfit_syst}
\\newboolean{massfit_nomi}
\\newboolean{ptdist_nomi}
\\newboolean{weidist_nomi}
\\setboolean{main_results}{false}
\\setboolean{other_results}{false}
\\setboolean{massfit_syst}{false}
\\setboolean{massfit_nomi}{false}
\\setboolean{ptdist_nomi}{false}
\\setboolean{weidist_nomi}{false}

\\newcommand{\systlabel}[1] 
{
\\ifthenelse{\equal{#1}{nominal}}{nominal reference}{}
\\ifthenelse{\equal{#1}{AccLo}}{acceptance stat uncertainty (+1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{AccHi}}{acceptance stat uncertainty (-1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{EtrkLo}}{tracking, quality, vertex efficiency stat unc (+1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{EtrkHi}}{tracking, quality, vertex efficiency stat unc (-1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{EtrecoHi}}{muon id and trigger stat uncertainty (-1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{EtrecoLo}}{muon id and trigger stat uncertainty (+1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{ptscaleLo}}{acceptance \\pt\\, scale (-1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{ptscaleHi}}{acceptance \\pt\\, scale (+1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{ptresoLo}}{acceptance \\pt\\, resolution (-1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{ptresoHi}}{acceptance \\pt\\, resolution (+1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{ptspec}}{acceptance \\pt\\, spectrum (pythia reweighted)}{}
\\ifthenelse{\equal{#1}{vtxpos}}{acceptance vertex position (luminous region)}{}
\\ifthenelse{\equal{#1}{nofsr}}{acceptance with no fsr}{}
\\ifthenelse{\equal{#1}{tnpmc}}{tnp from \\JPsi MC, for muon id and trigger efficiency}{}
\\ifthenelse{\equal{#1}{mctrue}}{tnp from \\JPsi MC truth, for muon id and trigger efficiencies}{}
\\ifthenelse{\equal{#1}{tnpmcUps}}{tnp from \\ups MC truth, for muon id and trigger efficiencies}{}
\\ifthenelse{\equal{#1}{linear812}}{linear background mass shape in 8-12\\GeVcc}{}
\\ifthenelse{\equal{#1}{otherHi}}{mass scale uncertainty on mass reconstruction (+1$\\sigma$)}{}
\\ifthenelse{\equal{#1}{otherLo}}{mass scale uncertainty on mass reconstruction (-1$\\sigma$)}{}
}

\\begin{document}

"""

intro = """
$~$
\\begin{center}
\\vspace{5cm}
{\\Huge \\bf \\sc Upsilon Results}

\\vspace{2cm}
{\\Large \\sc Documentation generated by the \\ups analysis machinery}

\\vspace{2cm}
{ {\\sc (Paper)}\\\\\\large\\tt BPH-10-003}\\\\
\\vspace{5mm}
{ {\\sc (Analysis site)}\\\\\\large\\tt\\href{https://espace.cern.ch/cms-quarkonia/upsilon/Default.aspx}{cern.ch/cms-upsilon}}\\\\
\\vspace{5mm}
{ {\\sc (other supporting documents)}\\\\\\large\\tt PAS BPH-10-003\\\\AN 2010-140\\\\}
\\vspace{5mm}
{ {\\sc (Analysis team contact)} \\\\\\large\\href{mailto:upsilon-team@espace.cern.ch}{\\tt upsilon-team@espace.cern.ch}}

\\vspace{5cm}
{(this is a {\\sc large} document intended for digital inspection, please \\underline{do not print})} \\

\\vfill
\\today

\\end{center}
"""

def make_tab(file,tab,caption,size=1.3,font=''):
    tmp = open(file+'.tex','a')
    tmp.write("\\begin{table}[!h]\n")
    tmp.write("{\\"+font+"\n")
    tmp.write("\\begin{center}\n")
    tmp.write("\\renewcommand{\\arraystretch}{"+str(size)+"}\n");
    tmp.write("\\caption{" + caption + "}\n");
    tmp.write("\\input{"+tab+"}\n")
    tmp.write("\\end{center}\n")
    tmp.write("}\n")
    tmp.write("\\end{table}\n\n")
    tmp.close()

def make_tab_input(file,tab,caption,size=1.3,font=''):
    tmp = open(file+'.tex','a')
    tmp.write("\\begin{table}[!h]\n")
    tmp.write("{\\"+font+"\n")
    tmp.write("\\begin{center}\n")
    tmp.write("\\renewcommand{\\arraystretch}{"+str(size)+"}\n");
    tmp.write("\\caption{" + caption + "}\n");
    tmp.write(tab)
    tmp.write("\\end{center}\n")
    tmp.write("}\n")
    tmp.write("\\end{table}\n\n")
    tmp.close()

def make_fig(file,figs,caption,width=0.32,angle=90):
    tmp = open(file+'.tex','a')
    tmp.write("\\begin{figure}[!ht]\n")
    tmp.write("\\centering\n");
    tmp.write("\\caption{" + caption + "}\n");
    for f in figs:
        tmp.write("\\subfigure[]{\\includegraphics[angle="+str(angle)+",width="+str(width)+"\\textwidth]{" + f + "}}\n")    
        print f
    #tmp.write("\\subfigure[]{\\includegraphics[angle=90,width=0.32\\textwidth]{mode0/fitres_1s_upsilonYieldWeighted_nominal/massfit_raw_rap0_pt1}}\n")
    tmp.write("\\end{figure}\n\n")
    tmp.close()

def getfigs(figs, str1, str2, str3,str4=''):
    tmp = []
    for fig in figs:
        if (fig.find(str1) != -1) & (fig.find(str2) != -1) & (fig.find(str3) != -1 ) & (fig.find(str4) != -1 ) :
            #print fig
            tmp.append(fig)
    return tmp

def subsec_title(ftex,title,text=''):
    tex = open(ftex + ".tex", 'a')
    tex.write("\\addtocontents{toc}{\\vspace{1.5mm}}\n")
    txt = "\\clearpage\n\n$~$\n\n\\vspace{10cm}\n\\subsection{\\hspace{1cm}{\\large "+title+"}}\n\n"
    tex.write(txt)
    txt = "\n"+text+"\n"
    tex.write(txt)
    #tex.write("\\clearpage\n\n")
    tex.close()

def sec_title(ftex,title, text=''):
    tex = open(ftex + ".tex", 'a')
    tex.write("\\addtocontents{toc}{\\vspace{1mm}}\n")
    txt = "\\cleardoublepage\n\n$~$\n\n\\vspace{10cm}\n\\section{\\hspace{1cm}{\\Large\\bf "+title+"}}\n"
    #txt = "\\cleardoublepage\n\n$~$\n\n\\vspace{10cm}\n{\\hspace{1cm}{\\huge\\bf "+title+"}}\n"
    tex.write(txt)
    #txt.write("\\addtocontents{toc}{"+title+"}\n")
    tex.write("\\newpage\n")
    #if text != '':
    #    txt = "\\newline\n\\vspace{2cm}\n\\hspace{4cm}{\\huge\\bf "+title2+"}\n"
    #    tex.write(txt)
    tex.write("\n\n")
    tex.close()

def add_to_tex(ftex,text):
    tex = open(ftex + ".tex", 'a')
    tex.write("\n"+text+"\n")
    tex.close()

def latexcmd(file): 
    return "pdflatex " + file

def end_file(file):
    tex = open(file + ".tex", 'a')
    tex.write("\\end{document}")
    tex.close()
    os.system(latexcmd(file))
    sys.exit(100)


##############
user  = pwd.getpwuid( os.getuid() )[ 0 ]
ltime = time.asctime( time.localtime(time.time()) )

ftex = "results"

today = datetime.date.today()
ftex += '_%s' % user 
ftex += '_%s' % today 
#print ftex

peak_label = ["","nominal","2s","3s"]

modename = ["$d\\sigma/d\\pt, |y|:(0,2)$",  "$d\\sigma/d\\pt~|y|:(0,1),(1,2)$", "$d\\sigma/d|y|$"] 

lsyst = ["nominal", "linear812", "tnpmc", "mctrue", "tnpmcUps", "EtrkLo", "EtrkHi", "EtrecoHi", "EtrecoLo", "AccLo", "AccHi", "ptscaleLo", "ptscaleHi", "ptresoLo", "ptresoHi", "ptspec", "vtxpos", "nofsr", "otherLo","otherHi"]


tex = open(ftex + ".tex", 'w')
tex.write(header)
tex.write(intro)

tex.write("{\\small\n")
tex.write("$~$\n\n\\vspace{2cm}\n")
tex.write("\\small analysis results created by " + user + "  on "+ ltime) 
tex.write("$~$\n\n\\vspace{5mm}\n")
tex.write("{(comments to: \\href{mailto:nuno.leonardo@cern.ch}{\\tt nuno.leonardo@cern.ch)}\n") 
tex.write("\\tableofcontents\n\\cleardoublepage\n\n")
tex.write("}\n")

tex.close()


if print_massfit_nomi:
    add_to_tex(ftex,"\\setboolean{massfit_nomi}{true}")
if(print_ptdist_nomi):
    add_to_tex(ftex,"\\setboolean{ptdist_nomi}{true}")
if(print_weidist_nomi):
    add_to_tex(ftex,"\\setboolean{weidist_nomi}{true}")
if print_massfit_syst:
    add_to_tex(ftex,"\\setboolean{massfit_syst}{true}")
if print_main_results:
    add_to_tex(ftex,"\\setboolean{main_results}{true}")
if print_other_results:
    add_to_tex(ftex,"\\setboolean{other_results}{true}")


#end_file(ftex)

##### XSEC FIGURES & TABLES

add_to_tex(ftex,"\\ifthenelse{\\boolean{main_results}}{")
sec_title(ftex,"Cross Rection Results")

figstmp = []
for m in range(0,3): #mode
    subsec_title(ftex,"results for " + modename[m])
    for i in range(1,4): #peak
        print "start: mode",m, "peak:",i, figstmp
        ny = 1
        if m == 1:
            ny = 2
        print "   y bins:", ny
        for y in range(0,ny):
            #figstmp.append("mode"+str(m)+"/xsection_"+str(i)+"s_y"+str(y))
            figstmp.append("mode"+str(m)+"/xsection_"+str(i)+"s_y"+str(y)+"_detailed")
            figstmp.append("mode"+str(m)+"/polgr_"+str(i)+"s_y"+str(y))
        print "  current:", figstmp
        cap = "$\Upsilon$("+str(i)+"S) cross section results, for "
        make_fig(ftex, figstmp, cap+ modename[m],0.47)
        
        list([figstmp.pop() for z in range(len(figstmp))])#clear list

        capsys = "$\Upsilon$("+str(i)+"S) cross section systematics, for "
        for y in range(0,ny):
            cap_add = ""
            if m != 2: 
                cap_add = "$d\\sigma/d\\pt$ "
            else:
                cap_add = "$d\\sigma/d|y|$ "
            if m == 1:
                cap_add += " "+str(y)+"$<|y|<$"+str(y+1)
            elif m==0:
                cap_add += " $|y|<2$"
            make_tab(ftex,"mode"+str(m)+"/summary_polariz_ups"+str(i)+"_y"+str(y),cap+ cap_add+", relative uncertainty in \\%.")
            #add_to_tex(ftex,"\\clearpage\n")
            make_tab(ftex,"mode"+str(m)+"/syst_table_ups"+str(i)+"_y"+str(y),capsys + cap_add+", relative uncertainty in \\%.")
            make_tab(ftex,"mode"+str(m)+"/results_ups"+str(i)+"_y"+str(y),cap+ cap_add+", relative uncertainty in \\%.",1.5,"small")
            #add_to_tex(ftex,"\\clearpage\n")
            make_tab(ftex,"mode"+str(m)+"/summary_ups"+str(i)+"_y"+str(y),cap+ cap_add+", absolute values.")
            make_tab(ftex,"mode"+str(m)+"/polariz_ups"+str(i)+"_y"+str(y),cap+ cap_add+", absolute values (central$\\pm$stat.$\\pm$syst.$\\pm$lumi.).",1.6,"small")
            if y==0:
                loc = "mode"+str(m)+"/fitres_"+str(i)+"s_upsilonYieldWeighted_nominal"
                loc +="/fitvalues_ups"+str(i)
                make_tab(ftex,loc,"Cross section calculation cross check, for $\Upsilon$("+str(i)+"S) "+cap_add)

            if m!=1:
                bb = "\\begin{tabular}{cccc} \n\\hline\n "
                bb += "\\input{mode"+str(m)+"/global_vs_sum_ups"+str(i)+"_y"+str(y)+"}\n"
                bb += "\\hline\n\\end{tabular}\n"
                make_tab_input(ftex,bb,"$\Upsilon$("+str(i)+"S) cross section comparison: fit vs sum")

        add_to_tex(ftex,"\\clearpage")

#sys.exit(9)
#end_file(ftex)

subsec_title(ftex,"Cross checks")

### compare tables
add_to_tex(ftex,"\\begin{table}[!h]")
add_to_tex(ftex,"\\begin{center}")
add_to_tex(ftex,"\\caption{" + "Total cross section: comparison global fit and sum of differential results." + "}");
add_to_tex(ftex,"\\begin{tabular}{cccc} \\hline")
for m in range(0,3): #mode
    for i in range(1,4): #peak
        ny = 1
        if m == 1:
            ny = 2
        print "   y bins:", ny
        for y in range(0,ny):
            add_to_tex(ftex,"\\input{"+"mode"+str(m)+"/global_vs_sum_ups"+str(i)+"_y"+str(y)+"}")
    add_to_tex(ftex,"\n\\hline\n")
add_to_tex(ftex,"\n\\hline\n\\end{tabular}")
add_to_tex(ftex,"\\end{center}")
add_to_tex(ftex,"\\end{table}")

add_to_tex(ftex,"}{\\hspace{4cm}(omitting: main cross section results)}")

#end_file(ftex)


### OTHER results: RATIOS, OVERLAING, THEORY

add_to_tex(ftex,"\\ifthenelse{\\boolean{other_results}}{")
sec_title(ftex,"Other Cross Section Results")

subsec_title(ftex,"Cross section ratios")
nratiot = ["mode3/xsec_ratio_detailed"]
nratiof = ["mode3/xsec_ratio_detailed"]
make_fig(ftex,nratiof,"Cross section ratios.",0.47)
make_tab(ftex,nratiot[0],"Cross section ratios",1.5,"large")


subsec_title(ftex,"Cross section overlay")
noverlay = ["mode0/xsec_overlay","mode1/xsec_1s_2ybin","mode1/xsec_2s_2ybin","mode1/xsec_3s_2ybin"]
make_fig(ftex,noverlay,"Cross sections overlayed",0.47) 

subsec_title(ftex,"Comparisons to theory")

#noverlay = ["../xsec_overlay"]
#make_fig(ftex,noverlay,"Cross sections overlayed",0.47) 


#subsec_title(ftex,"Comparisons to other expeiments")
#otherexp = [""]
#make_fig(ftex,otherexp,"comparison to tevatron results",0.47) 


add_to_tex(ftex,"}{\\hspace{4cm}(omitting: additional cross section results)}")


##### MASS FIT FIGURES ---


#if not print_massfit:
#    tex = open(ftex + ".tex", 'a')
#    tex.write("\\end{document}")
#    tex.close()
#    os.system(latexcmd)
#    sys.exit(20)


ldir = []
for i in range(0,3):
    path = "mode"+str(i)
    for filename in os.listdir(path):
        if filename.startswith("fitres_"):
            fn = path + "/" + filename
            ldir.append(fn)
            #print fn
            
lfig = []        
for dir in ldir:
    for d in os.listdir(dir):
        if d.endswith(".pdf"):
            f = dir + "/" + "/" + d
            lfig.append(f) 
            #print f

lfig.sort() #tbd: need to specify rule
print "found ", len(lfig), "plots" 


#NOMINAL DIFFERENTIAL MASS FITS
add_to_tex(ftex,"\\ifthenelse{\\boolean{massfit_nomi}}{")

sec_title(ftex,"Nominal Global Mass Fits")
globalfit = []
add_to_tex(ftex,"\\clearpage")
for i in range(1,4):
    globalfit.append("mode0/fitres_"+str(i)+"s_upsilonYieldWeighted_"+str(peak_label[i])+"/mass_raw")
    globalfit.append("mode0/fitres_"+str(i)+"s_upsilonYieldWeighted_"+str(peak_label[i])+"/mass_wei")
    make_fig(ftex, globalfit, "$\Upsilon$("+str(i)+"S) nominal raw (left) and weighted (right) global mass fits.",0.45,90)
    list([globalfit.pop() for z in range(len(globalfit))]) #clear list

sec_title(ftex,"Nominal Differential Mass Fits")
for i in range(1,4):
    for m in range(0,3):
        make_fig(ftex, getfigs(lfig, str(i)+"s","mode"+str(m)+"/", "nominal","massfit_rap"), "$\Upsilon$("+str(i)+"S) nominal weighted mass fits, for " + modename[m] + " binning.")

#RAW MASS FITS
sec_title(ftex,"Nominal Differential Mass Fits (RAW)")
for i in range(1,4):
    make_fig(ftex, getfigs(lfig,str(i) + "s","mode0","nominal","massfit_raw_rap"), "$\Upsilon$("+str(i)+"S) nominal raw mass fits, for " + modename[0] + " binning.")

add_to_tex(ftex,"}{\\hspace{4cm}(omitting figures: nominal mass fits)}")

#PT DISTRIBUTIONS
add_to_tex(ftex,"\\ifthenelse{\\boolean{ptdist_nomi}}{")
sec_title(ftex,"\\pt\\, Distributions per \\pt\\, bin")
for m in range(0,3):
    for i in range(1,4):
        make_fig(ftex, getfigs(lfig,str(i)+"s","mode"+str(m)+"/","nominal","pt_"), "$\Upsilon$("+str(i)+"S) \\pt\\, distribution, for "+modename[m]+"binning.")
add_to_tex(ftex,"}{\\hspace{4cm}(omitting figures: \\pt distributions)}")

#WEIGHT DISTRIBUTIONS
add_to_tex(ftex,"\\ifthenelse{\\boolean{weidist_nomi}}{")
sec_title(ftex,"Weight distributions per bin")
for m in range(0,3):
    for i in range(1,4):
        make_fig(ftex, getfigs(lfig,str(i)+"s","mode"+str(m)+"/","nominal","wei_"), "$\Upsilon$("+str(i)+"S) weight distribution, for "+modename[m]+"binning.")
add_to_tex(ftex,"}{\\hspace{4cm}(omitting figures: weight distributions)}")



#SYSTEMATIC MASS FITS
add_to_tex(ftex,"\\ifthenelse{\\boolean{massfit_syst}}{\n")
sec_title(ftex,"Systematic Differential Mass Fits")

if print_massfit_syst:
    cnt = 0
    for syst in lsyst: #systematic
        subsec_title(ftex,"systematics source: "+syst,"{\large Systematics contribution from\\systlabel{"+syst+"}}")
        #subsec_title(ftex,"systematics for \\systlabel{"+syst+"}")
        for i in range(1,4): # peak
            #sec_title(ftex,"Systematic Mass Fits: Y("+str(i)+"S) ",modename[m])
            for m in range(0,3): #analysis mode
               #subsec_title(ftex,systematic for modename[m])
                print "systematics Y(" + str(i) + "S) " + syst + " for " + modename[m]
                make_fig(ftex, getfigs(lfig,str(i)+"s","mode"+str(m)+"/",syst+'/',"massfit_rap"), "$\Upsilon$("+str(i)+"S) systematic mass fits:"+syst+", for "+modename[m]+" binning.")
    add_to_tex(ftex,"\\clearpage")
    
add_to_tex(ftex,"}{\\hspace{4cm}(omitting figures: systematic mass fits)}\n")

tex = open(ftex + ".tex", 'a')
tex.write("\\end{document}\n")
tex.close()


print latexcmd(ftex)
os.system(latexcmd(ftex))

#sys.exit(0)
